const clientModel = require("../models/clientModel");
const notifModel = require("../models/notificationsModel");
const { supabase, supabaseAdmin, ensureStorageBucket, createConfirmedUser } = require("../supabaseClient");

function parseCookie(str){const out={};if(!str)return out;str.split(";").forEach(p=>{const i=p.indexOf("=");if(i>-1)out[p.slice(0,i).trim()]=p.slice(i+1).trim()});return out}
function readAppUHeader(req){const h=req.headers["x-app-u"];if(!h)return{};try{return JSON.parse(decodeURIComponent(h))}catch{return{}}}
function sess(req){const s=req.session?.user||{};let role=s.role;let email=s.email_address||null;let auth_uid=s.auth_uid||null;if(!role||(!email&&!auth_uid)){const c=parseCookie(req.headers.cookie||"");if(c.app_u){try{const j=JSON.parse(decodeURIComponent(c.app_u));role=role||j.r;email=email||j.e||null;auth_uid=auth_uid||j.au||null}catch{}}}if(!role||(!email&&!auth_uid)){const h=readAppUHeader(req);if(h&&(h.e||h.au)){role=role||h.r;email=email||h.e||null;auth_uid=auth_uid||h.au||null}}return{role,email,auth_uid,id:s.id||null}}
function computeAge(iso){if(!iso)return null;const d=new Date(String(iso));if(isNaN(d.getTime()))return null;const t=new Date();let a=t.getFullYear()-d.getFullYear();const m=t.getMonth()-d.getMonth();if(m<0||(m===0&&t.getDate()<d.getDate()))a--;return a>=0&&a<=120?a:null}
function parseDataUrl(u){const m=/^data:(.+);base64,(.*)$/i.exec((u||"").trim());if(!m)return null;return{mime:m[1],b64:m[2]}}
function extFromMime(m){if(!m)return"png";if(/png/i.test(m))return"png";if(/jpe?g/i.test(m))return"jpg";if(/webp/i.test(m))return"webp";return"png"}
function looksLikeHttpUrl(s){return typeof s==="string"&&/^https?:\/\/.+/i.test(s.trim())}
function looksLikeBase64(s){return typeof s==="string"&&/^[A-Za-z0-9+/=\s]+$/.test(s.trim())&&s.replace(/\s+/g,"").length>200}
function coerceToDataUrl(v,mime){const t=String(v||"").trim();if(!t)return null;if(/^data:[a-z0-9+.\-\/]+;base64,/i.test(t))return t;if(looksLikeBase64(t))return`data:${mime||"image/png"};base64,${t.replace(/\s+/g,"")}`;return null}
async function directUploadAvatar(uid,dataUrl){if(!uid||!dataUrl)return null;const bucket="client-avatars";try{await ensureStorageBucket(bucket,true)}catch{}const p=parseDataUrl(dataUrl);if(!p)return null;const ext=extFromMime(p.mime);const path=`${uid}/${Date.now()}.${ext}`;const buffer=Buffer.from(p.b64,"base64");const up=await supabaseAdmin.storage.from(bucket).upload(path,buffer,{contentType:p.mime,upsert:true});if(up.error)return null;const pub=supabaseAdmin.storage.from(bucket).getPublicUrl(up.data.path);return pub?.data?.publicUrl||null}

const registerClient = async (req,res)=>{const{first_name,last_name,sex,email_address,password,is_agreed_to_terms}=req.body;try{const email=String(email_address||"").trim().toLowerCase();const verified=req.session?.verifiedEmails?.[email]===true;if(!verified)return res.status(400).json({message:"Please verify your email with the 6-digit code before creating an account."});const exists=await clientModel.checkEmailExistenceAcrossAllUsers(email);if(exists.length>0)return res.status(400).json({message:"Email already in use"});const agreed_at=is_agreed_to_terms?new Date().toISOString():null;const{user:authUser,error:authError}=await createConfirmedUser(email,password,{first_name,last_name,sex,role:"client",is_agreed_to_terms:!!is_agreed_to_terms,agreed_at});if(authError){return res.status(authError.status||400).json({message:authError.message||"Signup failed",code:authError.code||undefined})}await clientModel.createClient(authUser.id,first_name,last_name,sex,email,password,!!is_agreed_to_terms,agreed_at);if(req.session?.verifiedEmails)delete req.session.verifiedEmails[email];return res.status(201).json({message:"Client registered successfully",data:{first_name,last_name,sex,is_agreed_to_terms:!!is_agreed_to_terms,agreed_at,auth_uid:authUser.id}})}catch(e){return res.status(400).json({message:e?.message||"Internal server error"})}};

const me = async (req,res)=>{try{const s=sess(req);if(s.role!=="client"||(!s.auth_uid&&!s.email))return res.status(401).json({message:"Unauthorized"});const payload=await clientModel.getClientAccountProfile({auth_uid:s.auth_uid,email:s.email});return res.status(200).json(payload)}catch{return res.status(400).json({message:"Failed to load profile"})}};

const avatar = async (req,res)=>{try{const s=sess(req);if(s.role!=="client"||(!s.auth_uid&&!s.email))return res.status(401).json({message:"Unauthorized"});let incoming=null;let urlOverride=null;if(req.body&&typeof req.body==="object"){incoming=req.body.data_url||req.body.dataUrl||req.body.image||req.body.avatar||req.body.data||req.body.base64||req.body.client_avatar||null;urlOverride=req.body.url||req.body.avatar_url||req.body.avatarUrl||null}if(!incoming){const f=req.file||(Array.isArray(req.files)?req.files.find(x=>x&&(x.fieldname==="file"||x.fieldname==="avatar"||x.fieldname==="image"||x.fieldname==="client_avatar")):null);if(f&&f.buffer&&f.mimetype)incoming=`data:${f.mimetype};base64,${Buffer.from(f.buffer).toString("base64")}`}const row=await clientModel.getByAuthUid(s.auth_uid||null)||null;const uid=row?.auth_uid||s.auth_uid;if(!uid)return res.status(401).json({message:"Unauthorized"});if(looksLikeHttpUrl(urlOverride)){const prev=row?.client_avatar||"";await clientModel.updateAvatarUrl(uid,urlOverride);try{await clientModel.updateAuthUserAvatarMeta(uid,urlOverride)}catch{}const added=!prev;const title=added?"Profile picture added":"Profile picture updated";const message=added?"Uploaded a new profile picture.":"Changed profile picture.";await notifModel.create({auth_uid:uid,role:"client",title,message});return res.status(200).json({avatar_url:urlOverride})}if(typeof incoming!=="string")return res.status(400).json({message:"Invalid image"});const normalized=/^data:[a-z0-9+.\-\/]+;base64,/i.test(incoming.trim())?incoming.trim():coerceToDataUrl(incoming,"image/png");if(!normalized)return res.status(400).json({message:"Invalid image"});const prev=row?.client_avatar||"";let url=null;try{url=await clientModel.uploadClientAvatarDataUrl(uid,normalized)}catch{}if(!url){try{url=await directUploadAvatar(uid,normalized)}catch{}}if(!url)return res.status(400).json({message:"Failed to save avatar"});await clientModel.updateAvatarUrl(uid,url);try{await clientModel.updateAuthUserAvatarMeta(uid,url)}catch{}const added=!prev;const title=added?"Profile picture added":"Profile picture updated";const message=added?"Uploaded a new profile picture.":"Changed profile picture.";await notifModel.create({auth_uid:uid,role:"client",title,message});return res.status(200).json({avatar_url:url})}catch{return res.status(400).json({message:"Failed to save avatar"})}};

const removeAvatar = async (req,res)=>{try{const s=sess(req);if(s.role!=="client"||(!s.auth_uid&&!s.email))return res.status(401).json({message:"Unauthorized"});const row=await clientModel.getByAuthUid(s.auth_uid||null);const uid=row?.auth_uid||s.auth_uid;if(!uid)return res.status(401).json({message:"Unauthorized"});const had=!!row?.client_avatar;await clientModel.clearClientAvatar(uid);try{await clientModel.updateAuthUserAvatarMeta(uid,null)}catch{}if(had)await notifModel.create({auth_uid:uid,role:"client",title:"Profile picture removed",message:"Removed profile picture."});return res.status(200).json({avatar_url:""})}catch{return res.status(400).json({message:"Failed to remove avatar"})}};

const password = async (req,res)=>{try{const s=sess(req);if(s.role!=="client"||(!s.auth_uid&&!s.email))return res.status(401).json({message:"Unauthorized"});const{current_password,new_password,confirm_password}=req.body||{};if(!current_password||!new_password||new_password!==confirm_password)return res.status(400).json({message:"Invalid request"});const row=await clientModel.getByAuthUid(s.auth_uid||null);const acctEmail=row?.email_address||s.email;const sign=await supabase.auth.signInWithPassword({email:acctEmail,password:current_password});if(sign.error)return res.status(400).json({message:"Current password is incorrect"});const uid=row?.auth_uid||s.auth_uid;await clientModel.updateAuthPassword(uid,new_password);await clientModel.updatePassword(uid,new_password);return res.status(200).json({message:"Password updated"})}catch{return res.status(400).json({message:"Failed to update password"})}};

const updateProfile = async (req,res)=>{try{const s=sess(req);if(s.role!=="client"||(!s.auth_uid&&!s.email))return res.status(401).json({message:"Unauthorized"});const patch={};["first_name","last_name","phone","facebook","instagram","date_of_birth"].forEach(k=>{if(k in req.body){const v=typeof req.body[k]==="string"?req.body[k].trim():req.body[k];patch[k]=v===""?null:v}});const dbPatch={};if("first_name"in patch)dbPatch.first_name=patch.first_name;if("last_name"in patch)dbPatch.last_name=patch.last_name;if("phone"in patch)dbPatch.contact_number=patch.phone?patch.phone:null;if("facebook"in patch)dbPatch.social_facebook=patch.facebook?clientModel.normalizeFacebook(patch.facebook):null;if("instagram"in patch)dbPatch.social_instagram=patch.instagram?clientModel.normalizeInstagram(patch.instagram):null;if("date_of_birth"in patch){dbPatch.date_of_birth=patch.date_of_birth?patch.date_of_birth:null;const a=computeAge(patch.date_of_birth);dbPatch.age=a==null?null:a}if("phone"in patch&&patch.phone){const taken=await clientModel.isContactNumberTakenAcrossAll(patch.phone,s.auth_uid);if(taken)return res.status(400).json({message:"Contact number already in use"})}if("facebook"in patch&&patch.facebook){const takenFb=await clientModel.isSocialLinkTakenAcrossAll("facebook",patch.facebook,s.auth_uid);if(takenFb)return res.status(400).json({message:"Facebook already in use"})}if("instagram"in patch&&patch.instagram){const takenIg=await clientModel.isSocialLinkTakenAcrossAll("instagram",patch.instagram,s.auth_uid);if(takenIg)return res.status(400).json({message:"Instagram already in use"})}const hasAny=Object.keys(dbPatch).length>0;const before=await clientModel.getByAuthUid(s.auth_uid||null);const uid=before?.auth_uid||s.auth_uid;if(hasAny){await clientModel.updateClientProfile(uid,dbPatch);if("first_name"in patch||"last_name"in patch){const meta={};if("first_name"in patch)meta.first_name=patch.first_name||"";if("last_name"in patch)meta.last_name=patch.last_name||"";await clientModel.updateAuthUserMeta(uid,meta)}const changes=[];if(("first_name"in patch)||("last_name"in patch))changes.push("name");if("phone"in patch)changes.push("contact number");if("facebook"in patch)changes.push("facebook");if("instagram"in patch)changes.push("instagram");if("date_of_birth"in patch)changes.push("date of birth");const title="Profile updated successfully";const message=changes.length?`Updated ${changes.join(", ")}.`:"Your details are now up to date.";await notifModel.create({auth_uid:uid,role:"client",title,message})}const payload=await clientModel.getClientAccountProfile({auth_uid:uid,email:s.email});return res.status(200).json(payload)}catch{return res.status(400).json({message:"Failed to update profile"})}};

module.exports={registerClient,me,avatar,removeAvatar,password,updateProfile};
